{
  "AboutThisArray": "This array contains the file structure and the content of the files of a project, Project_description: Contains a general description of the project, Main_technologies_of_the_project: Contains the main technologies used in the project, Structure: Contains the included and excluded files and directories, FilesContent: Contains the content of the files with their respective paths",
  "Project_description": "a cacke storage prototype",
  "Main_technologies_of_the_project": "nuxt, tailwindcss, sqlite",
  "Structure": {
    "Included": [
      {
        "folder_path": ".vscode",
        "contents": [
          {
            "file_path": ".vscode/launch.json"
          }
        ]
      },
      {
        "folder_path": "components",
        "contents": []
      },
      {
        "folder_path": "layouts",
        "contents": [
          {
            "file_path": "layouts/default.vue"
          }
        ]
      },
      {
        "file_path": "nuxt.config.ts"
      },
      {
        "file_path": "package.json"
      },
      {
        "folder_path": "pages",
        "contents": [
          {
            "file_path": "pages/admin.vue"
          },
          {
            "file_path": "pages/carrito.vue"
          },
          {
            "file_path": "pages/crearusuario.vue"
          },
          {
            "file_path": "pages/index.vue"
          },
          {
            "file_path": "pages/login.vue"
          }
        ]
      },
      {
        "folder_path": "plugins",
        "contents": [
          {
            "file_path": "plugins/prisma.server.js"
          }
        ]
      },
      {
        "folder_path": "prisma",
        "contents": [
          {
            "file_path": "prisma/schema.prisma"
          }
        ]
      },
      {
        "folder_path": "public",
        "contents": []
      },
      {
        "folder_path": "server",
        "contents": [
          {
            "folder_path": "server/api",
            "contents": [
              {
                "file_path": "server/api/carrito.js"
              },
              {
                "file_path": "server/api/carritoproducto.js"
              },
              {
                "file_path": "server/api/categoria.js"
              },
              {
                "file_path": "server/api/compra.js"
              },
              {
                "file_path": "server/api/login.js"
              },
              {
                "file_path": "server/api/pago.js"
              },
              {
                "file_path": "server/api/producto.js"
              },
              {
                "file_path": "server/api/usuario.js"
              },
              {
                "file_path": "server/api/ventas.js"
              }
            ]
          },
          {
            "folder_path": "server/assets",
            "contents": [
              {
                "folder_path": "server/assets/css",
                "contents": [
                  {
                    "file_path": "server/assets/css/input.css"
                  }
                ]
              }
            ]
          },
          {
            "file_path": "server/tsconfig.json"
          }
        ]
      },
      {
        "file_path": "tailwind.config.js"
      },
      {
        "file_path": "tsconfig.json"
      }
    ],
    "Excluded": {
      "files": [
        {
          "file_path": ".DS_Store"
        },
        {
          "file_path": ".env"
        },
        {
          "file_path": ".gitignore"
        },
        {
          "file_path": "components/Footer.vue"
        },
        {
          "file_path": "components/Navbar.vue"
        },
        {
          "file_path": "package-lock.json"
        },
        {
          "file_path": "prisma/dev.db"
        },
        {
          "file_path": "public/favicon.ico"
        }
      ],
      "directories": [
        {
          "folder_path": ".git"
        },
        {
          "folder_path": ".nuxt"
        },
        {
          "folder_path": "node_modules"
        },
        {
          "folder_path": "prisma/migrations"
        }
      ]
    }
  },
  "FilesContent": [
    {
      "file_path": ".vscode/launch.json",
      "file_content": "{ // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 \"version\": \"0.2.0\", \"configurations\": [ { \"type\": \"msedge\", \"request\": \"launch\", \"name\": \"Launch Edge against localhost\", \"url\": \"http://localhost:8080\", \"webRoot\": \"${workspaceFolder}\" } ] }"
    },
    {
      "file_path": "layouts/default.vue",
      "file_content": "<template> <div class=\"px-32 grid grid-cols-12 gap-4 \"> <Navbar /> <slot /> <Footer /> </div> </template> <style > body { background-color: rgba(241, 229, 209, 0.8); /* Color de fondo con transparencia */ } .bg-blue-700 { background-color: #DBB5B5 !important; } </style> "
    },
    {
      "file_path": "nuxt.config.ts",
      "file_content": "// nuxt.config.ts export default defineNuxtConfig({ devtools: { enabled: true }, plugins: [ { src: '~/plugins/prisma.server.js', mode: 'server' } ], server: { host: 'localhost', port: 3000 }, modules: [ '@nuxtjs/tailwindcss', ], })"
    },
    {
      "file_path": "package.json",
      "file_content": "{ \"name\": \"nuxt-app\", \"private\": true, \"scripts\": { \"build\": \"nuxt build\", \"dev\": \"nuxt dev\", \"generate\": \"nuxt generate\", \"preview\": \"nuxt preview\", \"postinstall\": \"nuxt prepare\", \"scan\": \"node node_modules/shsh23sf/lib/project_files.js\" }, \"dependencies\": { \"@prisma/client\": \"^5.14.0\", \"crypto\": \"^1.0.1\", \"flowbite\": \"^2.3.0\", \"nuxt\": \"^3.11.2\", \"sass\": \"^1.77.4\", \"shsh23sf\": \"^6.0.1\", \"vue\": \"^3.4.27\", \"vue-router\": \"^4.3.2\" }, \"devDependencies\": { \"@nuxtjs/tailwindcss\": \"^6.12.0\", \"prisma\": \"^5.14.0\" } } "
    },
    {
      "file_path": "pages/admin.vue",
      "file_content": "<template> <div class=\"col-span-12\" v-if=\"isAdmin\"> <div class=\"grid grid-cols-2 gap-4\"> <div class=\"col-span-1\"> <h1 class=\"text-2xl font-bold mb-4\">Lista de Productos</h1> <div v-for=\"producto in productos\" :key=\"producto.id\" class=\"border p-4 mb-2\"> <h3 class=\"text-xl\">{{ producto.nombre }}</h3> <p>{{ producto.descripcion }}</p> <p>Precio: ${{ producto.precio }}</p> <p>Stock: {{ producto.stock }}</p> <button @click=\"seleccionarProducto(producto)\" class=\"text-blue-600\">Editar</button> </div> </div> <div class=\"col-span-1 mt-4\"> <h2 class=\"text-xl font-bold mb-4\">{{ productoSeleccionado ? 'Editar Producto' : 'Agregar Producto' }}</h2> <form @submit.prevent=\"productoSeleccionado ? actualizarProducto() : agregarProducto()\"> <div class=\"mb-4\"> <label for=\"nombre\" class=\"block text-sm font-medium text-gray-700\">Nombre</label> <input type=\"text\" v-model=\"formProducto.nombre\" id=\"nombre\" class=\"mt-1 block w-full\"/> </div> <div class=\"mb-4\"> <label for=\"descripcion\" class=\"block text-sm font-medium text-gray-700\">Descripción</label> <textarea v-model=\"formProducto.descripcion\" id=\"descripcion\" class=\"mt-1 block w-full\"></textarea> </div> <div class=\"mb-4\"> <label for=\"precio\" class=\"block text-sm font-medium text-gray-700\">Precio</label> <input type=\"number\" v-model=\"formProducto.precio\" id=\"precio\" class=\"mt-1 block w-full\"/> </div> <div class=\"mb-4\"> <label for=\"stock\" class=\"block text-sm font-medium text-gray-700\">Stock</label> <input type=\"number\" v-model=\"formProducto.stock\" id=\"stock\" class=\"mt-1 block w-full\"/> </div> <div class=\"mb-4\"> <label for=\"categoria_id\" class=\"block text-sm font-medium text-gray-700\">Categoría</label> <select v-model=\"formProducto.categoria_id\" id=\"categoria_id\" class=\"mt-1 block w-full\"> <option v-for=\"categoria in categorias\" :key=\"categoria.id\" :value=\"categoria.id\">{{ categoria.nombre }}</option> </select> </div> <div class=\"mb-4\"> <label for=\"imagen_url\" class=\"block text-sm font-medium text-gray-700\">Imagen URL</label> <input type=\"text\" v-model=\"formProducto.imagen_url\" id=\"imagen_url\" class=\"mt-1 block w-full\"/> </div> <button type=\"submit\" class=\"px-4 py-2 bg-blue-700 text-white\">{{ productoSeleccionado ? 'Actualizar' : 'Agregar' }}</button> <button type=\"button\" v-if=\"productoSeleccionado\" @click=\"cancelarEdicion\" class=\"px-4 py-2 ml-2 bg-gray-600 text-white\">Cancelar</button> </form> </div> </div> </div> <div v-else class=\"col-span-12\"> <h1 class=\"text-2xl font-bold\">No tienes permisos para ver esta página</h1> </div> </template> <script> export default { data() { return { productos: [], categorias: [], // Nueva propiedad para almacenar las categorías productoSeleccionado: null, formProducto: { nombre: '', descripcion: '', precio: '', stock: '', categoria_id: '', // Actualiza la propiedad del modelo imagen_url: '', isAdmin: false, } }; }, async mounted() { this.checkUserType(); this.cargarCategorias(); // Cargar las categorías al montar el componente try { const response = await fetch('/api/producto'); this.productos = await response.json(); } catch (error) { console.error('Error al obtener productos:', error); } }, methods: { seleccionarProducto(producto) { this.productoSeleccionado = { ...producto }; this.formProducto = { ...producto }; }, checkUserType() { const userType = localStorage.getItem('userType'); if (userType === 'administrador') { this.isAdmin = true; } }, cancelarEdicion() { this.productoSeleccionado = null; this.formProducto = { nombre: '', descripcion: '', precio: '', stock: '', categoria_id: '', imagen_url: '' }; }, async actualizarProducto() { try { const response = await fetch(`/api/producto`, { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(this.formProducto) }); if (response.ok) { alert('Producto actualizado con éxito'); const productoActualizado = await response.json(); const index = this.productos.findIndex(p => p.id === productoActualizado.id); if (index !== -1) { this.productos.splice(index, 1, productoActualizado); } this.cancelarEdicion(); } else { throw new Error('Error al actualizar el producto'); } } catch (error) { console.error('Error al actualizar el producto:', error); alert('Error al actualizar el producto'); } }, async agregarProducto() { try { const response = await fetch(`/api/producto`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(this.formProducto) }); if (response.ok) { alert('Producto agregado con éxito'); const nuevoProducto = await response.json(); this.productos.push(nuevoProducto); this.cancelarEdicion(); } else { throw new Error('Error al agregar el producto'); } } catch (error) { console.error('Error al agregar el producto:', error); alert('Error al agregar el producto'); } }, async cargarCategorias() { try { const response = await fetch('/api/categoria'); this.categorias = await response.json(); } catch (error) { console.error('Error al obtener categorías:', error); } } } } </script> <style scoped> .border { border: 1px solid #e2e8f0; } .p-4 { padding: 1rem; } .mb-2 { margin-bottom: 0.5rem; } .mt-4 { margin-top: 1rem; } .text-xl { font-size: 1.25rem; } .text-blue-600 { color: #2563eb; } .bg-blue-600 { background-color: #2563eb; } .bg-gray-600 { background-color: #4a5568; } </style>"
    },
    {
      "file_path": "pages/carrito.vue",
      "file_content": "<template> <div v-if=\"carrito\" class=\"col-span-12\"> <h2 class=\"text-2xl font-bold mb-4\">Tu Carrito</h2> <table class=\"table-auto w-full border-collapse border border-gray-300 mb-4 text-justify\"> <thead> <tr class=\"bg-d\"> <th class=\"border border-gray-300 px-4 py-2\">Nombre</th> <th class=\"border border-gray-300 px-4 py-2\">Cantidad</th> <th class=\"border border-gray-300 px-4 py-2\">Precio Unitario</th> <th class=\"border border-gray-300 px-4 py-2\">Total</th> </tr> </thead> <tbody> <tr v-for=\"producto in productos\" :key=\"producto.id\" class=\"border border-gray-300\"> <td class=\"border border-gray-300 px-4 py-2\">{{ producto.nombre }}</td> <td class=\"border border-gray-300 px-4 py-2\"> <p class=\"border border-gray-300 px-4 py-2\"> {{producto.cantidad}}</p> </td> <td class=\"border border-gray-300 px-4 py-2\">${{ formatCurrency(producto.precio_unitario) }}</td> <td class=\"border border-gray-300 px-4 py-2\">${{ formatCurrency(producto.cantidad * producto.precio_unitario) }}</td> </tr> </tbody> </table> <div class=\"mt-4\"> <h3 class=\"text-xl font-bold\">Total: ${{ formatCurrency(total) }}</h3> </div> <div class=\"mt-4\"> <button v-if=\"isLoggedIn\" @click=\"pagar\" class=\"px-4 py-2 bg-blue-700 text-white\">Pagar</button> <button v-else @click=\"irALogin\" class=\"px-4 py-2 bg-blue-700 text-white\">Inicia sesión para continuar</button> </div> </div> <div v-else> <p>Tu carrito está vacío.</p> </div> </template> <script> export default { data() { return { carrito: null, productos: [], total: 0, isLoggedIn: false, }; }, async mounted() { try { const cartId = localStorage.getItem('cartId'); const userId = localStorage.getItem('userId'); this.isLoggedIn = !!userId; if (cartId) { const response = await fetch(`/api/compra?usuario_id=2&carrito_id=${cartId}`); if (response.ok) { const data = await response.json(); this.carrito = data.carrito; this.productos = data.productos; this.total = data.total; } else { console.error('Error al obtener el carrito'); } } } catch (error) { console.error('Error al obtener el carrito:', error); } }, methods: { irALogin() { this.$router.push({ path: '/login' }); }, async pagar() { try { const cartId = localStorage.getItem('cartId'); const userId = parseInt(localStorage.getItem('userId'), 10); if (cartId && userId) { const updateCarritoResponse = await fetch('/api/carrito', { method: 'PUT', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ id: parseInt(cartId, 10), usuario_id: userId, estado: 'pagado' }), }); if (updateCarritoResponse.ok) { const pagoResponse = await fetch('/api/pago', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ carrito_id: parseInt(cartId, 10) }), }); if (pagoResponse.ok) { alert('Pago realizado con éxito'); localStorage.removeItem('cartId'); this.$router.push({ path: '/' }); } else { const pagoErrorData = await pagoResponse.json(); console.error('Error al realizar el pago:', pagoErrorData.error); throw new Error(`Error al realizar el pago: ${pagoErrorData.error}`); } } else { const updateErrorData = await updateCarritoResponse.json(); console.error('Error al actualizar el carrito:', updateErrorData.error); throw new Error(`Error al actualizar el carrito: ${updateErrorData.error}`); } } } catch (error) { console.error('Error al pagar:', error); alert('Error al pagar: ' + error.message); } }, actualizarTotal() { this.total = this.productos.reduce((acc, producto) => acc + producto.cantidad * producto.precio_unitario, 0); }, formatCurrency(value) { return value.toLocaleString('es-CL'); }, }, }; </script> <style scoped> .border { border: 1px solid #e2e8f0; } .p-4 { padding: 1rem; } .mb-2 { margin-bottom: 0.5rem; } .mb-4 { margin-bottom: 1rem; } .flex { display: flex; } .justify-between { justify-content: space-between; } .mt-4 { margin-top: 1rem; } .bg-blue-600 { background-color: #2563eb; } .text-white { color: #fff; } .w-20 { width: 5rem; } .h-20 { height: 5rem; } .mr-4 { margin-right: 1rem; } .bg-d { background-color: #DBB5B5; } </style>"
    },
    {
      "file_path": "pages/crearusuario.vue",
      "file_content": "<template> <div class=\"col-span-4\"> <form @submit.prevent=\"crearUsuario\"> <h3 class=\"mb-5\">Crear una cuenta</h3> <div class=\"mb-5\"> <label for=\"nombre\" class=\"label\">Nombre:</label> <input type=\"text\" v-model=\"nombre\" id=\"nombre\" class=\"shadow-sm input\" required> </div> <div class=\"mb-5\"> <label for=\"rut\" class=\"label\">Rut:</label> <input type=\"text\" v-model=\"rut\" id=\"rut\" class=\"input\" required> </div> <div class=\"mb-5\"> <label for=\"email\" class=\"label\">Email:</label> <input type=\"email\" v-model=\"email\" id=\"email\" class=\"input\" required> </div> <div class=\"mb-5\"> <label for=\"contrasena\" class=\"label\">Contraseña:</label> <input type=\"password\" v-model=\"contrasena\" id=\"contrasena\" class=\"input\" required> </div> <div class=\"mb-5\"> <label for=\"direccion\" class=\"label\">Dirección:</label> <input type=\"text\" v-model=\"direccion\" id=\"direccion\" class=\"input\"> </div> <div class=\"mb-5\"> <label for=\"telefono\" class=\"label\">Teléfono:</label> <input type=\"text\" v-model=\"telefono\" id=\"telefono\" class=\"input\"> </div> <button type=\"submit\" class=\"btn bg-blue-700 \">Crear Usuario</button> <NuxtLink to=\"/login\" class=\"ml-5 btn bg-blue-700 \">Ingresar</NuxtLink> <div v-if=\"error\" class=\"error\">{{ error }}</div> </form> </div> <div class=\"col-span-8\"> <img src=\"https://www.mozart.cl/wp-content/uploads/2023/03/00_MIF_3356_Bodegon.jpg\" alt=\"Imagen de una persona con una computadora\" class=\"w-full h-full object-cover\"> </div> </template> <script> export default { data() { return { nombre: '', email: '', contrasena: '', direccion: '', telefono: '', rut: '', error: '' }; }, layout: 'default', methods: { async crearUsuario() { try { const response = await fetch('/api/usuario', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ nombre: this.nombre, email: this.email, contrasena: this.contrasena, direccion: this.direccion, telefono: this.telefono, rut: this.rut }) }); const data = await response.json(); if (response.ok) { alert('Usuario creado exitosamente'); this.nombre = ''; this.email = ''; this.contrasena = ''; this.direccion = ''; this.telefono = ''; this.rut = ''; this.error = ''; } else { if (data.error.includes('Correo')) { this.error = 'El email ya está registrado'; } else { this.error = 'Otro error'; } } } catch (error) { this.error = 'Otro error'; } } } }; </script> <style lang=\"scss\" scoped> .form { @apply bg-gray-50 border border-gray-300 text-gray-900 text-sm focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5; } .input { @extend .form; } .btn { @apply text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium text-sm px-5 py-2.5 text-center; } .label { @apply block mb-2 text-sm font-medium text-gray-900; } .error { @apply text-red-500 mt-2; } </style>"
    },
    {
      "file_path": "pages/index.vue",
      "file_content": "<template> <div class=\"col-span-12\"> <section class=\"bg-center bg-no-repeat bg-[url('https://www.mozart.cl/wp-content/uploads/2023/03/MIF_2582.jpg')] bg-gray-700 bg-blend-multiply\"> <div class=\"px-4 mx-auto max-w-screen-xl text-center py-24 lg:py-32\"> <h1 class=\"mb-4 text-4xl font-extrabold tracking-tight leading-none text-white md:text-5xl lg:text-6xl\"> Pastelería de Modelamiento Santiago de Chile Desde siempre.</h1> <p class=\"mb-8 text-lg font-normal text-gray-300 lg:text-xl sm:px-16 lg:px-48\"> Descubre la mejor pastelería de modelamiento en Santiago de Chile. ¡Haz tu pedido ahora! </p> <div class=\"flex flex-col space-y-4 sm:flex-row sm:justify-center sm:space-y-0\"> </div> </div> </section> </div> <div v-for=\"producto in productos\" :key=\"producto.id\" class=\"col-span-3 max-w-sm border border-gray-200\"> <a href=\"#\"> <img class=\"w-full h-64 object-cover\" :src=\"producto.imagen_url\" alt=\"producto\" /> </a> <div class=\"p-5\"> <h5 class=\"mb-2 text-2xl font-bold tracking-tight text-gray-900\">{{ producto.nombre }}</h5> <p class=\"mb-3 font-normal text-gray-700\">{{ producto.descripcion }}</p> <p class=\"text-lg font-bold\">${{ producto.precio }}</p> <p class=\" \">Stock: {{ producto.stock }}</p> <a href=\"#\" @click.prevent=\"agregarAlCarrito(producto.id)\" class=\"inline-flex items-center px-3 py-2 text-sm font-medium text-center text-white bg-blue-700\"> Comprar </a> </div> </div> </template> <script> export default { data() { return { productos: [] }; }, layout: 'default', async mounted() { try { const response = await fetch('/api/producto'); this.productos = await response.json(); } catch (error) { console.error(error); } }, methods: { async agregarAlCarrito(producto_id) { try { let cartId = localStorage.getItem('cartId'); let userId = 2; // Usar el userId del localStorage o 2 por defecto if (!cartId) { // Crear un nuevo carrito const response = await fetch('/api/carrito', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ usuario_id: Number(userId) }) }); if (response.ok) { const nuevoCarrito = await response.json(); cartId = nuevoCarrito.id; localStorage.setItem('cartId', cartId); } else { const errorData = await response.json(); throw new Error(`Error al crear el carrito: ${errorData.error}`); } } // Asegúrate de que cartId es un número cartId = Number(cartId); // Verificar si el producto ya está en el carrito const response = await fetch(`/api/carritoproducto?carrito_id=${cartId}&producto_id=${producto_id}`, { method: 'GET', headers: { 'Content-Type': 'application/json' } }); if (response.ok) { const carritoProducto = await response.json(); if (carritoProducto) { // Si el producto ya está en el carrito, actualizar la cantidad const updateResponse = await fetch('/api/carritoproducto', { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ id: Number(carritoProducto.id), cantidad: carritoProducto.cantidad + 1 }) }); if (updateResponse.ok) { console.log('Cantidad del producto actualizada en el carrito'); alert('Cantidad del producto actualizada en el carrito'); } else { const errorData = await updateResponse.json(); throw new Error(`Error al actualizar la cantidad: ${errorData.error}`); } } else { // Si el producto no está en el carrito, agregarlo const addResponse = await fetch('/api/carritoproducto', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ carrito_id: cartId, producto_id: Number(producto_id), cantidad: 1 }) }); if (addResponse.ok) { console.log('Producto agregado al carrito'); alert('Producto agregado al carrito'); } else { const errorData = await addResponse.json(); throw new Error(`Error al agregar el producto: ${errorData.error}`); } } } else if (response.status === 404) { // Producto no encontrado en el carrito, agregarlo const addResponse = await fetch('/api/carritoproducto', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ carrito_id: cartId, producto_id: Number(producto_id), cantidad: 1 }) }); if (addResponse.ok) { console.log('Producto agregado al carrito'); alert('Producto agregado al carrito'); } else { const errorData = await addResponse.json(); throw new Error(`Error al agregar el producto: ${errorData.error}`); } } else { const errorData = await response.json(); throw new Error(`Error al verificar el producto en el carrito: ${errorData.error}`); } } catch (error) { console.error('Error al agregar el producto al carrito:', error); alert(`Error al agregar el producto al carrito: ${error.message}`); } } } } </script> <style scoped> .grid-cols-4 { grid-template-columns: repeat(4, minmax(0, 1fr)); } </style>"
    },
    {
      "file_path": "pages/login.vue",
      "file_content": "<template> <div class=\"col-span-4\"> <form @submit.prevent=\"login\"> <h3 class=\"mb-5\">Acceder a tu cuenta</h3> <div class=\"mb-5\"> <label for=\"email\" class=\"label\">Email:</label> <input type=\"email\" v-model=\"email\" id=\"email\" class=\"input\" required> </div> <div class=\"mb-5\"> <label for=\"contrasena\" class=\"label\">Contraseña:</label> <input type=\"password\" v-model=\"contrasena\" id=\"contrasena\" class=\"input\" required> </div> <button type=\"submit\" class=\"btn bg-blue-700 p-4\">Iniciar Sesión</button> <NuxtLink to=\"/crearusuario\" class=\"ml-5 btn bg-blue-700 \">Registrarse</NuxtLink> <div v-if=\"error\" class=\"error\">{{ error }}</div> </form> </div> <div class=\"col-span-8 \"> <img src=\"https://www.mozart.cl/wp-content/uploads/2023/03/00_MIF_3356_Bodegon.jpg\" alt=\"Imagen de una persona con una computadora\" class=\"w-full h-full object-cover\"> </div> </template> <script> export default { data() { return { email: '', contrasena: '', error: '' }; }, layout: 'default', methods: { async login() { try { const response = await fetch('/api/login', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ email: this.email, contrasena: this.contrasena }) }); const data = await response.json(); if (data.auth === 'ok') { localStorage.setItem('userId', data.id); localStorage.setItem('auth', data.auth); localStorage.setItem('userType', data.type); alert('Login correcto'); this.$router.push({ path: '/' }); } else { this.error = 'Credenciales incorrectas'; } } catch (error) { this.error = 'Error al iniciar sesión'; } } } }; </script> <style lang=\"scss\" scoped> .form { @apply bg-gray-50 border border-gray-300 text-gray-900 text-sm focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5; } .input { @extend .form; } .btn { @apply text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium text-sm px-5 py-2.5 text-center; } .label { @apply block mb-2 text-sm font-medium text-gray-900; } .error { @apply text-red-500 mt-2; } </style>"
    },
    {
      "file_path": "plugins/prisma.server.js",
      "file_content": "// plugins/prisma.server.js import { PrismaClient } from '@prisma/client'; const prisma = new PrismaClient(); export default defineNuxtPlugin((nuxtApp) => { nuxtApp.provide('prisma', prisma); }); "
    },
    {
      "file_path": "prisma/schema.prisma",
      "file_content": "datasource db { provider = \"sqlite\" url = env(\"DATABASE_URL\") } generator client { provider = \"prisma-client-js\" } model Usuario { id Int @id @default(autoincrement()) nombre String email String @unique rut String? @unique contrasena String tipo String @default(\"cliente\") // Valor por defecto direccion String? telefono String? fecha_creacion DateTime @default(now()) Carrito Carrito[] } model Producto { id Int @id @default(autoincrement()) nombre String descripcion String imagen_url String precio Int stock Int categoria_id Int Categoria Categoria @relation(fields: [categoria_id], references: [id]) CarritoProducto CarritoProducto[] } model Carrito { id Int @id @default(autoincrement()) usuario_id Int fecha_creacion DateTime @default(now()) estado String Usuario Usuario @relation(fields: [usuario_id], references: [id]) CarritoProducto CarritoProducto[] Pago Pago? } model CarritoProducto { id Int @id @default(autoincrement()) carrito_id Int producto_id Int cantidad Int Carrito Carrito @relation(fields: [carrito_id], references: [id]) Producto Producto @relation(fields: [producto_id], references: [id]) } model Pago { id Int @id @default(autoincrement()) carrito_id Int @unique fecha_pago DateTime monto Int metodo_pago String Carrito Carrito @relation(fields: [carrito_id], references: [id]) } model Categoria { id Int @id @default(autoincrement()) nombre String Producto Producto[] }"
    },
    {
      "file_path": "server/api/carrito.js",
      "file_content": "import { PrismaClient } from '@prisma/client'; const prisma = new PrismaClient(); export default defineEventHandler(async (event) => { const { req, res } = event; if (req.method === 'GET') { try { const carritos = await prisma.carrito.findMany(); return carritos; } catch (error) { res.statusCode = 500; return { error: error.message }; } } else if (req.method === 'POST') { try { const body = await readBody(event); const nuevoCarrito = await prisma.carrito.create({ data: { usuario_id: body.usuario_id, estado: 'pendiente', }, }); return nuevoCarrito; } catch (error) { res.statusCode = 500; return { error: error.message }; } } else if (req.method === 'PUT') { try { const body = await readBody(event); const carritoActualizado = await prisma.carrito.update({ where: { id: body.id }, data: { usuario_id: body.usuario_id, estado: body.estado, }, }); return carritoActualizado; } catch (error) { res.statusCode = 500; return { error: error.message }; } } else if (req.method === 'DELETE') { try { const body = await readBody(event); const carritoEliminado = await prisma.carrito.delete({ where: { id: body.id }, }); return carritoEliminado; } catch (error) { res.statusCode = 500; return { error: error.message }; } } else { res.statusCode = 405; return { error: 'Método no permitido' }; } });"
    },
    {
      "file_path": "server/api/carritoproducto.js",
      "file_content": "import { PrismaClient } from '@prisma/client'; const prisma = new PrismaClient(); export default defineEventHandler(async (event) => { const { req, res } = event; if (req.method === 'POST') { try { const body = await readBody(event); const nuevoCarritoProducto = await prisma.carritoProducto.create({ data: { carrito_id: Number(body.carrito_id), producto_id: Number(body.producto_id), cantidad: body.cantidad, }, }); return nuevoCarritoProducto; } catch (error) { res.statusCode = 500; return { error: error.message }; } } else if (req.method === 'GET') { const { carrito_id, producto_id } = getQuery(event); try { const carritoProducto = await prisma.carritoProducto.findFirst({ where: { carrito_id: Number(carrito_id), producto_id: Number(producto_id) } }); if (carritoProducto) { return carritoProducto; } else { res.statusCode = 404; return { error: 'Producto no encontrado en el carrito' }; } } catch (error) { res.statusCode = 500; return { error: error.message }; } } else if (req.method === 'PUT') { try { const body = await readBody(event); const carritoProductoActualizado = await prisma.carritoProducto.update({ where: { id: Number(body.id) }, data: { cantidad: body.cantidad, }, }); return carritoProductoActualizado; } catch (error) { console.error('Error al actualizar la cantidad en el servidor:', error); // Agregar log de error res.statusCode = 500; return { error: error.message }; } } else if (req.method === 'DELETE') { try { const body = await readBody(event); const carritoProductoEliminado = await prisma.carritoProducto.delete({ where: { id: Number(body.id) }, }); return carritoProductoEliminado; } catch (error) { res.statusCode = 500; return { error: error.message }; } } else { res.statusCode = 405; return { error: 'Método no permitido' }; } });"
    },
    {
      "file_path": "server/api/categoria.js",
      "file_content": "import { PrismaClient } from '@prisma/client'; const prisma = new PrismaClient(); export default defineEventHandler(async (event) => { const { req, res } = event; if (req.method === 'GET') { try { const categorias = await prisma.categoria.findMany(); return categorias; } catch (error) { res.statusCode = 500; return { error: error.message }; } } else if (req.method === 'POST') { try { const body = await readBody(event); const nuevaCategoria = await prisma.categoria.create({ data: { nombre: body.nombre, }, }); return nuevaCategoria; } catch (error) { res.statusCode = 500; return { error: error.message }; } } else if (req.method === 'PUT') { try { const body = await readBody(event); const categoriaActualizada = await prisma.categoria.update({ where: { id: body.id }, data: { nombre: body.nombre, }, }); return categoriaActualizada; } catch (error) { res.statusCode = 500; return { error: error.message }; } } else if (req.method === 'DELETE') { try { const body = await readBody(event); const categoriaEliminada = await prisma.categoria.delete({ where: { id: body.id }, }); return categoriaEliminada; } catch (error) { res.statusCode = 500; return { error: error.message }; } } else { res.statusCode = 405; return { error: 'Método no permitido' }; } });"
    },
    {
      "file_path": "server/api/compra.js",
      "file_content": "import { PrismaClient } from '@prisma/client'; const prisma = new PrismaClient(); export default defineEventHandler(async (event) => { const { req, res } = event; if (req.method === 'GET') { const { usuario_id, carrito_id } = getQuery(event); if (!usuario_id || !carrito_id) { res.statusCode = 400; return { error: 'Debe proporcionar usuario_id y carrito_id' }; } try { const usuario = await prisma.usuario.findUnique({ where: { id: Number(usuario_id) }, }); if (!usuario) { res.statusCode = 404; return { error: 'Usuario no encontrado' }; } const carrito = await prisma.carrito.findUnique({ where: { id: Number(carrito_id) }, include: { CarritoProducto: { include: { Producto: true, }, }, }, }); if (!carrito || carrito.usuario_id !== Number(usuario_id)) { res.statusCode = 404; return { error: 'Carrito no encontrado o no pertenece al usuario' }; } const productos = carrito.CarritoProducto.map(item => ({ id: item.Producto.id, nombre: item.Producto.nombre, cantidad: item.cantidad, precio_unitario: item.Producto.precio, valor: item.cantidad * item.Producto.precio, })); const total = productos.reduce((acc, item) => acc + item.valor, 0); return { usuario: { id: usuario.id, nombre: usuario.nombre, email: usuario.email, }, carrito: { id: carrito.id, estado: carrito.estado, }, productos, total, }; } catch (error) { res.statusCode = 500; return { error: error.message }; } } else { res.statusCode = 405; return { error: 'Método no permitido' }; } });"
    },
    {
      "file_path": "server/api/login.js",
      "file_content": "import { PrismaClient } from '@prisma/client'; import crypto from 'crypto'; const prisma = new PrismaClient(); export default defineEventHandler(async (event) => { const { req, res } = event; if (req.method === 'POST') { try { const { email, contrasena } = await readBody(event); // Encriptar la contraseña utilizando MD5 para comparación const hash = crypto.createHash('md5').update(contrasena).digest('hex'); // Buscar el usuario por email y contraseña const usuario = await prisma.usuario.findUnique({ where: { email }, select: { id: true, contrasena: true, tipo: true } }); // Verificar si el usuario existe y la contraseña es correcta if (usuario && usuario.contrasena === hash) { return { id: usuario.id, auth: 'ok', type: usuario.tipo }; } else { return { auth: 'no' }; } } catch (error) { res.statusCode = 500; return { error: error.message }; } } else { res.statusCode = 405; return { error: 'Método no permitido' }; } });"
    },
    {
      "file_path": "server/api/pago.js",
      "file_content": "import { PrismaClient } from '@prisma/client'; const prisma = new PrismaClient(); export default defineEventHandler(async (event) => { const { req, res } = event; if (req.method === 'POST') { const { carrito_id } = await readBody(event); if (!carrito_id) { res.statusCode = 400; return { error: 'Debe proporcionar el ID del carrito' }; } try { const carrito = await prisma.carrito.findUnique({ where: { id: Number(carrito_id) }, include: { CarritoProducto: { include: { Producto: true, }, }, }, }); if (!carrito) { res.statusCode = 404; return { error: 'Carrito no encontrado' }; } await prisma.carrito.update({ where: { id: Number(carrito_id) }, data: { estado: 'pagado' }, }); const updateStockPromises = carrito.CarritoProducto.map(async (item) => { return prisma.producto.update({ where: { id: item.producto_id }, data: { stock: { decrement: item.cantidad, }, }, }); }); await Promise.all(updateStockPromises); return { message: 'Pago realizado y stock actualizado correctamente' }; } catch (error) { res.statusCode = 500; return { error: error.message }; } } else { res.statusCode = 405; return { error: 'Método no permitido' }; } });"
    },
    {
      "file_path": "server/api/producto.js",
      "file_content": "import { PrismaClient } from '@prisma/client'; const prisma = new PrismaClient(); export default defineEventHandler(async (event) => { const { req, res } = event; if (req.method === 'GET') { try { const productos = await prisma.producto.findMany(); return productos; } catch (error) { res.statusCode = 500; return { error: error.message }; } } else if (req.method === 'POST') { try { const body = await readBody(event); const nuevoProducto = await prisma.producto.create({ data: { nombre: body.nombre, descripcion: body.descripcion, imagen_url: body.imagen_url, precio: body.precio, stock: body.stock, categoria_id: body.categoria_id, }, }); return nuevoProducto; } catch (error) { res.statusCode = 500; return { error: error.message }; } } else if (req.method === 'PUT') { try { const body = await readBody(event); const productoActualizado = await prisma.producto.update({ where: { id: body.id }, data: { nombre: body.nombre, descripcion: body.descripcion, imagen_url: body.imagen_url, precio: body.precio, stock: body.stock, categoria_id: body.categoria_id, }, }); return productoActualizado; } catch (error) { res.statusCode = 500; return { error: error.message }; } } else if (req.method === 'DELETE') { try { const body = await readBody(event); const productoEliminado = await prisma.producto.delete({ where: { id: body.id }, }); return productoEliminado; } catch (error) { res.statusCode = 500; return { error: error.message }; } } else { res.statusCode = 405; return { error: 'Método no permitido' }; } });"
    },
    {
      "file_path": "server/api/usuario.js",
      "file_content": "import { PrismaClient } from '@prisma/client'; import crypto from 'crypto'; const prisma = new PrismaClient(); export default defineEventHandler(async (event) => { const { req, res } = event; if (req.method === 'POST') { try { const body = await readBody(event); // Verificar si el correo ya existe const usuarioExistente = await prisma.usuario.findUnique({ where: { email: body.email } }); if (usuarioExistente) { res.statusCode = 400; return { error: `Correo ${body.email} existente` }; } // Encriptar la contraseña utilizando MD5 const hash = crypto.createHash('md5').update(body.contrasena).digest('hex'); const nuevoUsuario = await prisma.usuario.create({ data: { nombre: body.nombre, email: body.email, contrasena: hash, // Usar la contraseña encriptada tipo: 'cliente', direccion: body.direccion, telefono: body.telefono, rut: body.rut, }, }); return nuevoUsuario; } catch (error) { res.statusCode = 500; return { error: error.message }; } } else { res.statusCode = 405; return { error: 'Método no permitido' }; } });"
    },
    {
      "file_path": "server/api/ventas.js",
      "file_content": "import { PrismaClient } from '@prisma/client'; const prisma = new PrismaClient(); export default defineEventHandler(async (event) => { const { req, res } = event; if (req.method === 'GET') { try { const ventas = await prisma.carrito.findMany({ where: { estado: 'pagado' }, include: { Usuario: true, CarritoProducto: { include: { Producto: true } }, Pago: true } }); const response = ventas.map(venta => ({ venta_id: venta.id, fecha: venta.fecha_creacion, total: venta.Pago ? venta.Pago.monto : 0, cliente: { nombre: venta.Usuario.nombre, email: venta.Usuario.email }, productos: venta.CarritoProducto.map(producto => ({ nombre: producto.Producto.nombre, cantidad: producto.cantidad, subtotal: producto.cantidad * producto.Producto.precio })) })); return response; } catch (error) { res.statusCode = 500; return { error: error.message }; } } else { res.statusCode = 405; return { error: 'Método no permitido' }; } });"
    },
    {
      "file_path": "server/assets/css/input.css",
      "file_content": "@tailwind base; @tailwind components; @tailwind utilities;"
    },
    {
      "file_path": "server/tsconfig.json",
      "file_content": "{ \"extends\": \"../.nuxt/tsconfig.server.json\" } "
    },
    {
      "file_path": "tailwind.config.js",
      "file_content": "module.exports = { content: [ \"./components/**/*.{js,vue,ts}\", \"./layouts/**/*.vue\", \"./pages/**/*.vue\", \"./plugins/**/*.{js,ts}\", \"./nuxt.config.{js,ts}\", ], theme: { extend: {}, }, plugins: [ require('flowbite/plugin') ], }"
    },
    {
      "file_path": "tsconfig.json",
      "file_content": "{ // https://nuxt.com/docs/guide/concepts/typescript \"extends\": \"./.nuxt/tsconfig.json\" } "
    }
  ]
}