{
    "thisinfo": {
        "whatis": "Contains all files and subdirectories of a project, excluding specified directories and files",
        "howto": "directoryStructure: an object containing the directory and file structure, others: contains the excluded directories and files, fileDetails: contains the details (content) of the files"
    },
    "directoryStructure": {
        "path": "/Users/vmvv/work/tiendaonline",
        "subdirectories": [
            {
                "path": "/Users/vmvv/work/tiendaonline/components",
                "subdirectories": [],
                "files": []
            },
            {
                "path": "/Users/vmvv/work/tiendaonline/layouts",
                "subdirectories": [],
                "files": [
                    {
                        "path": "/Users/vmvv/work/tiendaonline/layouts/default.vue",
                        "content": "",
                        "isBinary": false
                    }
                ]
            },
            {
                "path": "/Users/vmvv/work/tiendaonline/pages",
                "subdirectories": [],
                "files": [
                    {
                        "path": "/Users/vmvv/work/tiendaonline/pages/crearusuario.vue",
                        "content": "",
                        "isBinary": false
                    },
                    {
                        "path": "/Users/vmvv/work/tiendaonline/pages/index.vue",
                        "content": "",
                        "isBinary": false
                    }
                ]
            },
            {
                "path": "/Users/vmvv/work/tiendaonline/plugins",
                "subdirectories": [],
                "files": [
                    {
                        "path": "/Users/vmvv/work/tiendaonline/plugins/prisma.server.js",
                        "content": "",
                        "isBinary": false
                    }
                ]
            },
            {
                "path": "/Users/vmvv/work/tiendaonline/prisma",
                "subdirectories": [],
                "files": [
                    {
                        "path": "/Users/vmvv/work/tiendaonline/prisma/schema.prisma",
                        "content": "",
                        "isBinary": false
                    }
                ]
            },
            {
                "path": "/Users/vmvv/work/tiendaonline/public",
                "subdirectories": [],
                "files": []
            },
            {
                "path": "/Users/vmvv/work/tiendaonline/server",
                "subdirectories": [
                    {
                        "path": "/Users/vmvv/work/tiendaonline/server/api",
                        "subdirectories": [],
                        "files": [
                            {
                                "path": "/Users/vmvv/work/tiendaonline/server/api/carrito.js",
                                "content": "",
                                "isBinary": false
                            },
                            {
                                "path": "/Users/vmvv/work/tiendaonline/server/api/carritoproducto.js",
                                "content": "",
                                "isBinary": false
                            },
                            {
                                "path": "/Users/vmvv/work/tiendaonline/server/api/categoria.js",
                                "content": "",
                                "isBinary": false
                            },
                            {
                                "path": "/Users/vmvv/work/tiendaonline/server/api/compra.js",
                                "content": "",
                                "isBinary": false
                            },
                            {
                                "path": "/Users/vmvv/work/tiendaonline/server/api/pago.js",
                                "content": "",
                                "isBinary": false
                            },
                            {
                                "path": "/Users/vmvv/work/tiendaonline/server/api/producto.js",
                                "content": "",
                                "isBinary": false
                            },
                            {
                                "path": "/Users/vmvv/work/tiendaonline/server/api/usuario.js",
                                "content": "",
                                "isBinary": false
                            }
                        ]
                    },
                    {
                        "path": "/Users/vmvv/work/tiendaonline/server/assets",
                        "subdirectories": [
                            {
                                "path": "/Users/vmvv/work/tiendaonline/server/assets/css",
                                "subdirectories": [],
                                "files": [
                                    {
                                        "path": "/Users/vmvv/work/tiendaonline/server/assets/css/input.css",
                                        "content": "",
                                        "isBinary": false
                                    }
                                ]
                            }
                        ],
                        "files": []
                    }
                ],
                "files": [
                    {
                        "path": "/Users/vmvv/work/tiendaonline/server/tsconfig.json",
                        "content": "",
                        "isBinary": false
                    }
                ]
            }
        ],
        "files": [
            {
                "path": "/Users/vmvv/work/tiendaonline/.env",
                "content": "",
                "isBinary": false
            },
            {
                "path": "/Users/vmvv/work/tiendaonline/nuxt.config.ts",
                "content": "",
                "isBinary": false
            },
            {
                "path": "/Users/vmvv/work/tiendaonline/package.json",
                "content": "",
                "isBinary": false
            },
            {
                "path": "/Users/vmvv/work/tiendaonline/tailwind.config.js",
                "content": "",
                "isBinary": false
            },
            {
                "path": "/Users/vmvv/work/tiendaonline/tsconfig.json",
                "content": "",
                "isBinary": false
            }
        ]
    },
    "others": {
        "directories": [
            "/Users/vmvv/work/tiendaonline/.git",
            "/Users/vmvv/work/tiendaonline/.nuxt",
            "/Users/vmvv/work/tiendaonline/node_modules",
            "/Users/vmvv/work/tiendaonline/prisma/migrations"
        ],
        "files": [
            "/Users/vmvv/work/tiendaonline/.gitignore",
            "/Users/vmvv/work/tiendaonline/components/Footer.vue",
            "/Users/vmvv/work/tiendaonline/components/Navbar.vue",
            "/Users/vmvv/work/tiendaonline/files_details.txt",
            "/Users/vmvv/work/tiendaonline/package-lock.json",
            "/Users/vmvv/work/tiendaonline/prisma/dev.db",
            "/Users/vmvv/work/tiendaonline/public/favicon.ico",
            "/Users/vmvv/work/tiendaonline/resume.js"
        ]
    },
    "fileDetails": [
        {
            "path": "/Users/vmvv/work/tiendaonline/.env",
            "content": "<contenidoarchivo>EXCLUDE_DIRS=node_modules,.nuxt,migrations,.git\nEXCLUDE_FILES=package-lock.json,dev.db,dev.db-journal,favicon.ico,.DS_Store,files_details.txt,files_details.txt,resume.js,tailwind.config,.gitignore,Navbar.vue,Footer.vue\nPROJECT_DESCRIPTION=your_project_description_here\n\nDATABASE_URL=\"file:./dev.db\"\nJWT_SECRET=\"1iLXPsgTI6n4Rg31aDqD6JPjggxc0fv2LfKaFnz7X9g=\"</contenidoarchivo>",
            "isBinary": false
        },
        {
            "path": "/Users/vmvv/work/tiendaonline/layouts/default.vue",
            "content": "<contenidoarchivo><template>\n    <div class=\"px-32 grid grid-cols-12 gap-4 \">\n<Navbar />\n      <slot />\n<Footer />\n   \n    </div>\n  </template>\n  </contenidoarchivo>",
            "isBinary": false
        },
        {
            "path": "/Users/vmvv/work/tiendaonline/nuxt.config.ts",
            "content": "<contenidoarchivo>// nuxt.config.ts\nexport default defineNuxtConfig({\n  devtools: { enabled: true },\n  plugins: [\n     { src: '~/plugins/prisma.server.js', mode: 'server' }\n  ],\n  server: {\n    host: 'localhost',\n    port: 3000\n  },\n  modules: [\n    '@nuxtjs/tailwindcss',\n  ],\n  buildModules: [\n    \"@nuxtjs/axios\"\n  ],\n  axios: {\n    baseURL: '/',\n  },\n})</contenidoarchivo>",
            "isBinary": false
        },
        {
            "path": "/Users/vmvv/work/tiendaonline/package.json",
            "content": "<contenidoarchivo>{\n  \"name\": \"nuxt-app\",\n  \"private\": true,\n  \"type\": \"module\",\n  \"scripts\": {\n    \"build\": \"nuxt build\",\n    \"dev\": \"nuxt dev\",\n    \"generate\": \"nuxt generate\",\n    \"preview\": \"nuxt preview\",\n    \"postinstall\": \"nuxt prepare\"\n  },\n  \"dependencies\": {\n    \"@nuxtjs/axios\": \"^5.13.6\",\n    \"@prisma/client\": \"^5.14.0\",\n    \"bcrypt\": \"^5.1.1\",\n    \"body-parser\": \"^1.20.2\",\n    \"crypto\": \"^1.0.1\",\n    \"express\": \"^4.19.2\",\n    \"flowbite\": \"^2.3.0\",\n    \"jsonwebtoken\": \"^9.0.2\",\n    \"nuxt\": \"^3.11.2\",\n    \"sass\": \"^1.77.4\",\n    \"vue\": \"^3.4.27\",\n    \"vue-router\": \"^4.3.2\"\n  },\n  \"devDependencies\": {\n    \"@nuxtjs/tailwindcss\": \"^6.12.0\",\n    \"prisma\": \"^5.14.0\"\n  }\n}\n</contenidoarchivo>",
            "isBinary": false
        },
        {
            "path": "/Users/vmvv/work/tiendaonline/pages/crearusuario.vue",
            "content": "<contenidoarchivo><template>\n\n  <div class=\"col-span-4\">\n  \n    <form @submit.prevent=\"crearUsuario\" >\n      <div class=\"mb-5\">\n        <label for=\"nombre\" class=\"label\">Nombre:</label>\n        <input type=\"text\" v-model=\"nombre\" id=\"nombre\" class=\"shadow-sm input\" required>\n      </div>\n      <div class=\"mb-5\">\n        <label for=\"rut\" class=\"label\">Rut:</label>\n        <input type=\"text\" v-model=\"rut\" id=\"rut\" class=\"input\" required>\n      </div>\n      <div class=\"mb-5\">\n        <label for=\"email\" class=\"label\">Email:</label>\n        <input type=\"email\" v-model=\"email\" id=\"email\" class=\"input\" required>\n      </div>\n      <div class=\"mb-5\">\n        <label for=\"contrasena\" class=\"label\">Contraseña:</label>\n        <input type=\"password\" v-model=\"contrasena\" id=\"contrasena\" class=\"input\" required>\n      </div>\n      <div class=\"mb-5\">\n        <label for=\"direccion\" class=\"label\">Dirección:</label>\n        <input type=\"text\" v-model=\"direccion\" id=\"direccion\" class=\"input\">\n      </div>\n      <div class=\"mb-5\">\n        <label for=\"telefono\" class=\"label\">Teléfono:</label>\n        <input type=\"text\" v-model=\"telefono\" id=\"telefono\" class=\"input\">\n      </div>\n    \n      <button type=\"submit\" class=\"btn\">Crear Usuario</button>\n    </form>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      nombre: '',\n      email: '',\n      contrasena: '',\n      direccion: '',\n      telefono: '',\n      rut: ''\n    };\n  },\n  layout: 'default',\n  methods: {\n    async crearUsuario() {\n      try {\n        const response = await fetch('/api/usuario', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            nombre: this.nombre,\n            email: this.email,\n            contrasena: this.contrasena,\n            direccion: this.direccion,\n            telefono: this.telefono,\n            rut: this.rut\n          })\n        });\n        if (response.ok) {\n          alert('Usuario creado exitosamente');\n          // Limpiar el formulario\n          this.nombre = '';\n          this.email = '';\n          this.contrasena = '';\n          this.direccion = '';\n          this.telefono = '';\n          this.rut = '';\n        } else {\n          throw new Error('Error al crear el usuario');\n        }\n      } catch (error) {\n        alert(error.message);\n      }\n    }\n  }\n};\n</script>\n<style lang=\"scss\" scoped>\n.form {\n  @apply bg-gray-50 border border-gray-300 text-gray-900 text-sm  focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5;\n}\n.input {\n  @extend .form;\n}\n.btn {\n  @apply text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium  text-sm px-5 py-2.5 text-center\n}\n.label {\n  @apply block mb-2 text-sm font-medium text-gray-900;\n}\n</style></contenidoarchivo>",
            "isBinary": false
        },
        {
            "path": "/Users/vmvv/work/tiendaonline/pages/index.vue",
            "content": "<contenidoarchivo><template>\n\n\n\n  <div v-for=\"producto in productos\" :key=\"producto.id\"\n    class=\" col-span-3 max-w-sm bg-white border border-gray-200 \">\n    <a href=\"#\">\n      <img class=\" w-full h-64 object-cover\" :src=\"producto.imagen_url\" alt=\"producto\" />\n    </a>\n    <div class=\"p-5\">\n\n      <h5 class=\"mb-2 text-2xl font-bold tracking-tight text-gray-900 \">{{ producto.nombre }}</h5>\n\n      <p class=\"mb-3 font-normal text-gray-700 \">{{ producto.descripcion }}</p>\n      <p class=\"text-lg font-bold\">${{ producto.precio }}</p>\n      <a href=\"#\" class=\"inline-flex items-center px-3 py-2 text-sm font-medium text-center text-white bg-blue-700  \">\n        Comprar\n\n      </a>\n    </div>\n\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      productos: []\n    };\n  },\n  layout: 'default',\n  async mounted() {\n    try {\n      const response = await fetch('/api/producto');\n      this.productos = await response.json();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n}\n</script>\n\n<style scoped>\n.grid-cols-4 {\n  grid-template-columns: repeat(4, minmax(0, 1fr));\n}\n</style></contenidoarchivo>",
            "isBinary": false
        },
        {
            "path": "/Users/vmvv/work/tiendaonline/plugins/prisma.server.js",
            "content": "<contenidoarchivo>// plugins/prisma.server.js\nimport { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nexport default defineNuxtPlugin((nuxtApp) => {\n  nuxtApp.provide('prisma', prisma);\n});\n</contenidoarchivo>",
            "isBinary": false
        },
        {
            "path": "/Users/vmvv/work/tiendaonline/prisma/schema.prisma",
            "content": "<contenidoarchivo>datasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\nmodel Usuario {\n  id             Int       @id @default(autoincrement())\n  nombre         String\n  email          String    @unique\n  rut            String?    @unique\n  contrasena     String\n  tipo           String    @default(\"cliente\")  // Valor por defecto\n  direccion      String?\n  telefono       String?\n  fecha_creacion DateTime  @default(now())\n  Carrito        Carrito[]\n}\n\nmodel Producto {\n  id              Int       @id @default(autoincrement())\n  nombre          String\n  descripcion     String\n  imagen_url      String\n  precio          Int\n  stock           Int\n  categoria_id    Int\n  Categoria       Categoria @relation(fields: [categoria_id], references: [id])\n  CarritoProducto CarritoProducto[]\n}\n\nmodel Carrito {\n  id              Int              @id @default(autoincrement())\n  usuario_id      Int             \n  fecha_creacion  DateTime         @default(now())\n  estado          String\n  Usuario         Usuario          @relation(fields: [usuario_id], references: [id])\n  CarritoProducto CarritoProducto[]\n  Pago            Pago?\n}\n\nmodel CarritoProducto {\n  id             Int      @id @default(autoincrement())\n  carrito_id     Int\n  producto_id    Int\n  cantidad       Int\n  Carrito        Carrito  @relation(fields: [carrito_id], references: [id])\n  Producto       Producto @relation(fields: [producto_id], references: [id])\n}\n\nmodel Pago {\n  id            Int      @id @default(autoincrement())\n  carrito_id    Int      @unique\n  fecha_pago    DateTime\n  monto         Int\n  metodo_pago   String\n  Carrito       Carrito  @relation(fields: [carrito_id], references: [id])\n}\n\nmodel Categoria {\n  id            Int       @id @default(autoincrement())\n  nombre        String\n  Producto      Producto[]\n}</contenidoarchivo>",
            "isBinary": false
        },
        {
            "path": "/Users/vmvv/work/tiendaonline/server/api/carrito.js",
            "content": "<contenidoarchivo>import { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nexport default defineEventHandler(async (event) => {\n  const { req, res } = event;\n\n  if (req.method === 'GET') {\n    try {\n      const carritos = await prisma.carrito.findMany();\n      return carritos;\n    } catch (error) {\n      res.statusCode = 500;\n      return { error: error.message };\n    }\n  } else if (req.method === 'POST') {\n    try {\n      const body = await readBody(event);\n      const nuevoCarrito = await prisma.carrito.create({\n        data: {\n          usuario_id: body.usuario_id,\n          estado: 'pendiente',\n        },\n      });\n      return nuevoCarrito;\n    } catch (error) {\n      res.statusCode = 500;\n      return { error: error.message };\n    }\n  } else if (req.method === 'PUT') {\n    try {\n      const body = await readBody(event);\n      const carritoActualizado = await prisma.carrito.update({\n        where: { id: body.id },\n        data: {\n          usuario_id: body.usuario_id,\n          estado: body.estado,\n        },\n      });\n      return carritoActualizado;\n    } catch (error) {\n      res.statusCode = 500;\n      return { error: error.message };\n    }\n  } else if (req.method === 'DELETE') {\n    try {\n      const body = await readBody(event);\n      const carritoEliminado = await prisma.carrito.delete({\n        where: { id: body.id },\n      });\n      return carritoEliminado;\n    } catch (error) {\n      res.statusCode = 500;\n      return { error: error.message };\n    }\n  } else {\n    res.statusCode = 405;\n    return { error: 'Método no permitido' };\n  }\n});</contenidoarchivo>",
            "isBinary": false
        },
        {
            "path": "/Users/vmvv/work/tiendaonline/server/api/carritoproducto.js",
            "content": "<contenidoarchivo>import { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nexport default defineEventHandler(async (event) => {\n  const { req, res } = event;\n\n  if (req.method === 'POST') {\n    try {\n      const body = await readBody(event);\n      const nuevoCarritoProducto = await prisma.carritoProducto.create({\n        data: {\n          carrito_id: body.carrito_id,\n          producto_id: body.producto_id,\n          cantidad: body.cantidad,\n        },\n      });\n      return nuevoCarritoProducto;\n    } catch (error) {\n      res.statusCode = 500;\n      return { error: error.message };\n    }\n  } else if (req.method === 'GET') {\n    try {\n      const carritoProductos = await prisma.carritoProducto.findMany();\n      return carritoProductos;\n    } catch (error) {\n      res.statusCode = 500;\n      return { error: error.message };\n    }\n  } else if (req.method === 'PUT') {\n    try {\n      const body = await readBody(event);\n      const carritoProductoActualizado = await prisma.carritoProducto.update({\n        where: { id: body.id },\n        data: {\n          carrito_id: body.carrito_id,\n          producto_id: body.producto_id,\n          cantidad: body.cantidad,\n        },\n      });\n      return carritoProductoActualizado;\n    } catch (error) {\n      res.statusCode = 500;\n      return { error: error.message };\n    }\n  } else if (req.method === 'DELETE') {\n    try {\n      const body = await readBody(event);\n      const carritoProductoEliminado = await prisma.carritoProducto.delete({\n        where: { id: body.id },\n      });\n      return carritoProductoEliminado;\n    } catch (error) {\n      res.statusCode = 500;\n      return { error: error.message };\n    }\n  } else {\n    res.statusCode = 405;\n    return { error: 'Método no permitido' };\n  }\n});</contenidoarchivo>",
            "isBinary": false
        },
        {
            "path": "/Users/vmvv/work/tiendaonline/server/api/categoria.js",
            "content": "<contenidoarchivo>import { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nexport default defineEventHandler(async (event) => {\n  const { req, res } = event;\n\n  if (req.method === 'GET') {\n    try {\n      const categorias = await prisma.categoria.findMany();\n      return categorias;\n    } catch (error) {\n      res.statusCode = 500;\n      return { error: error.message };\n    }\n  } else if (req.method === 'POST') {\n    try {\n      const body = await readBody(event);\n      const nuevaCategoria = await prisma.categoria.create({\n        data: {\n          nombre: body.nombre,\n        },\n      });\n      return nuevaCategoria;\n    } catch (error) {\n      res.statusCode = 500;\n      return { error: error.message };\n    }\n  } else if (req.method === 'PUT') {\n    try {\n      const body = await readBody(event);\n      const categoriaActualizada = await prisma.categoria.update({\n        where: { id: body.id },\n        data: {\n          nombre: body.nombre,\n        },\n      });\n      return categoriaActualizada;\n    } catch (error) {\n      res.statusCode = 500;\n      return { error: error.message };\n    }\n  } else if (req.method === 'DELETE') {\n    try {\n      const body = await readBody(event);\n      const categoriaEliminada = await prisma.categoria.delete({\n        where: { id: body.id },\n      });\n      return categoriaEliminada;\n    } catch (error) {\n      res.statusCode = 500;\n      return { error: error.message };\n    }\n  } else {\n    res.statusCode = 405;\n    return { error: 'Método no permitido' };\n  }\n});</contenidoarchivo>",
            "isBinary": false
        },
        {
            "path": "/Users/vmvv/work/tiendaonline/server/api/compra.js",
            "content": "<contenidoarchivo>import { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nexport default defineEventHandler(async (event) => {\n  const { req, res } = event;\n\n  if (req.method === 'GET') {\n    const { usuario_id, carrito_id } = getQuery(event);\n\n    if (!usuario_id || !carrito_id) {\n      res.statusCode = 400;\n      return { error: 'Debe proporcionar usuario_id y carrito_id' };\n    }\n\n    try {\n      const usuario = await prisma.usuario.findUnique({\n        where: { id: Number(usuario_id) },\n      });\n\n      if (!usuario) {\n        res.statusCode = 404;\n        return { error: 'Usuario no encontrado' };\n      }\n\n      const carrito = await prisma.carrito.findUnique({\n        where: { id: Number(carrito_id) },\n        include: {\n          CarritoProducto: {\n            include: {\n              Producto: true,\n            },\n          },\n        },\n      });\n\n      if (!carrito || carrito.usuario_id !== Number(usuario_id)) {\n        res.statusCode = 404;\n        return { error: 'Carrito no encontrado o no pertenece al usuario' };\n      }\n\n      const productos = carrito.CarritoProducto.map(item => ({\n        id: item.Producto.id,\n        nombre: item.Producto.nombre,\n        cantidad: item.cantidad,\n        precio_unitario: item.Producto.precio,\n        valor: item.cantidad * item.Producto.precio,\n      }));\n\n      const total = productos.reduce((acc, item) => acc + item.valor, 0);\n\n      return {\n        usuario: {\n          id: usuario.id,\n          nombre: usuario.nombre,\n          email: usuario.email,\n        },\n        carrito: {\n          id: carrito.id,\n          estado: carrito.estado,\n        },\n        productos,\n        total,\n      };\n    } catch (error) {\n      res.statusCode = 500;\n      return { error: error.message };\n    }\n  } else {\n    res.statusCode = 405;\n    return { error: 'Método no permitido' };\n  }\n});</contenidoarchivo>",
            "isBinary": false
        },
        {
            "path": "/Users/vmvv/work/tiendaonline/server/api/pago.js",
            "content": "<contenidoarchivo>import { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nexport default defineEventHandler(async (event) => {\n  const { req, res } = event;\n\n  if (req.method === 'POST') {\n    const { carrito_id } = await readBody(event);\n\n    if (!carrito_id) {\n      res.statusCode = 400;\n      return { error: 'Debe proporcionar el ID del carrito' };\n    }\n\n    try {\n      // Encuentra el carrito y sus productos\n      const carrito = await prisma.carrito.findUnique({\n        where: { id: Number(carrito_id) },\n        include: {\n          CarritoProducto: {\n            include: {\n              Producto: true,\n            },\n          },\n        },\n      });\n\n      if (!carrito) {\n        res.statusCode = 404;\n        return { error: 'Carrito no encontrado' };\n      }\n\n      // Actualiza el estado del carrito a \"pagado\"\n      await prisma.carrito.update({\n        where: { id: Number(carrito_id) },\n        data: { estado: 'pagado' },\n      });\n\n      // Actualiza el stock de los productos\n      const updateStockPromises = carrito.CarritoProducto.map(async (item) => {\n        return prisma.producto.update({\n          where: { id: item.producto_id },\n          data: {\n            stock: {\n              decrement: item.cantidad,\n            },\n          },\n        });\n      });\n\n      await Promise.all(updateStockPromises);\n\n      return { message: 'Pago realizado y stock actualizado correctamente' };\n    } catch (error) {\n      res.statusCode = 500;\n      return { error: error.message };\n    }\n  } else {\n    res.statusCode = 405;\n    return { error: 'Método no permitido' };\n  }\n});</contenidoarchivo>",
            "isBinary": false
        },
        {
            "path": "/Users/vmvv/work/tiendaonline/server/api/producto.js",
            "content": "<contenidoarchivo>import { PrismaClient } from '@prisma/client';\n\nconst prisma = new PrismaClient();\n\nexport default defineEventHandler(async (event) => {\n  const { req, res } = event;\n\n  if (req.method === 'GET') {\n    try {\n      const productos = await prisma.producto.findMany();\n      return productos;\n    } catch (error) {\n      res.statusCode = 500;\n      return { error: error.message };\n    }\n  } else if (req.method === 'POST') {\n    try {\n      const body = await readBody(event);\n      const nuevoProducto = await prisma.producto.create({\n        data: {\n          nombre: body.nombre,\n          descripcion: body.descripcion,\n          imagen_url: body.imagen_url,\n          precio: body.precio,\n          stock: body.stock,\n          categoria_id: body.categoria_id,\n        },\n      });\n      return nuevoProducto;\n    } catch (error) {\n      res.statusCode = 500;\n      return { error: error.message };\n    }\n  } else if (req.method === 'PUT') {\n    try {\n      const body = await readBody(event);\n      const productoActualizado = await prisma.producto.update({\n        where: { id: body.id },\n        data: {\n          nombre: body.nombre,\n          descripcion: body.descripcion,\n          imagen_url: body.imagen_url,\n          precio: body.precio,\n          stock: body.stock,\n          categoria_id: body.categoria_id,\n        },\n      });\n      return productoActualizado;\n    } catch (error) {\n      res.statusCode = 500;\n      return { error: error.message };\n    }\n  } else if (req.method === 'DELETE') {\n    try {\n      const body = await readBody(event);\n      const productoEliminado = await prisma.producto.delete({\n        where: { id: body.id },\n      });\n      return productoEliminado;\n    } catch (error) {\n      res.statusCode = 500;\n      return { error: error.message };\n    }\n  } else {\n    res.statusCode = 405;\n    return { error: 'Método no permitido' };\n  }\n});</contenidoarchivo>",
            "isBinary": false
        },
        {
            "path": "/Users/vmvv/work/tiendaonline/server/api/usuario.js",
            "content": "<contenidoarchivo>import { PrismaClient } from '@prisma/client';\nimport crypto from 'crypto';\n\nconst prisma = new PrismaClient();\n\nexport default defineEventHandler(async (event) => {\n  const { req, res } = event;\n\n  if (req.method === 'GET') {\n    try {\n      const usuarios = await prisma.usuario.findMany();\n      return usuarios;\n    } catch (error) {\n      res.statusCode = 500;\n      return { error: error.message };\n    }\n  } else if (req.method === 'POST') {\n    try {\n      const body = await readBody(event);\n\n      // Verificar si el correo ya existe\n      const usuarioExistente = await prisma.usuario.findUnique({\n        where: { email: body.email }\n      });\n\n      if (usuarioExistente) {\n        res.statusCode = 400;\n        return { error: `Correo ${body.email} existente` };\n      }\n\n      // Encriptar la contraseña utilizando MD5\n      const hash = crypto.createHash('md5').update(body.contrasena).digest('hex');\n\n      const nuevoUsuario = await prisma.usuario.create({\n        data: {\n          nombre: body.nombre,\n          email: body.email,\n          contrasena: hash,  // Usar la contraseña encriptada\n          tipo: 'cliente',\n          direccion: body.direccion,\n          telefono: body.telefono,\n          rut: body.rut,\n        },\n      });\n      return nuevoUsuario;\n    } catch (error) {\n      res.statusCode = 500;\n      return { error: error.message };\n    }\n  } else if (req.method === 'PUT') {\n    try {\n      const body = await readBody(event);\n\n      // Verificar si el correo ya existe (para otro usuario)\n      const usuarioExistente = await prisma.usuario.findUnique({\n        where: { email: body.email }\n      });\n\n      if (usuarioExistente && usuarioExistente.id !== body.id) {\n        res.statusCode = 400;\n        return { error: `Correo ${body.email} existente` };\n      }\n\n      // Encriptar la nueva contraseña utilizando MD5 si está presente en la solicitud\n      const hash = body.contrasena ? crypto.createHash('md5').update(body.contrasena).digest('hex') : undefined;\n\n      const usuarioActualizado = await prisma.usuario.update({\n        where: { id: body.id },\n        data: {\n          nombre: body.nombre,\n          email: body.email,\n          contrasena: hash,  // Usar la contraseña encriptada si está presente\n          tipo: body.tipo,\n          direccion: body.direccion,\n          telefono: body.telefono,\n        },\n      });\n      return usuarioActualizado;\n    } catch (error) {\n      res.statusCode = 500;\n      return { error: error.message };\n    }\n  } else if (req.method === 'DELETE') {\n    try {\n      const body = await readBody(event);\n      const usuarioEliminado = await prisma.usuario.delete({\n        where: { id: body.id },\n      });\n      return usuarioEliminado;\n    } catch (error) {\n      res.statusCode = 500;\n      return { error: error.message };\n    }\n  } else {\n    res.statusCode = 405;\n    return { error: 'Método no permitido' };\n  }\n});</contenidoarchivo>",
            "isBinary": false
        },
        {
            "path": "/Users/vmvv/work/tiendaonline/server/assets/css/input.css",
            "content": "<contenidoarchivo>@tailwind base;\n@tailwind components;\n@tailwind utilities;</contenidoarchivo>",
            "isBinary": false
        },
        {
            "path": "/Users/vmvv/work/tiendaonline/server/tsconfig.json",
            "content": "<contenidoarchivo>{\n  \"extends\": \"../.nuxt/tsconfig.server.json\"\n}\n</contenidoarchivo>",
            "isBinary": false
        },
        {
            "path": "/Users/vmvv/work/tiendaonline/tailwind.config.js",
            "content": "<contenidoarchivo>module.exports = {\n  content: [\n    \"./components/**/*.{js,vue,ts}\",\n    \"./layouts/**/*.vue\",\n    \"./pages/**/*.vue\",\n    \"./plugins/**/*.{js,ts}\",\n    \"./nuxt.config.{js,ts}\",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [\n    require('flowbite/plugin')\n  ],\n}</contenidoarchivo>",
            "isBinary": false
        },
        {
            "path": "/Users/vmvv/work/tiendaonline/tsconfig.json",
            "content": "<contenidoarchivo>{\n  // https://nuxt.com/docs/guide/concepts/typescript\n  \"extends\": \"./.nuxt/tsconfig.json\"\n}\n</contenidoarchivo>",
            "isBinary": false
        }
    ]
}